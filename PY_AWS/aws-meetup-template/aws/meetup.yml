Description: A template to create a load balanced autoscaled Web flask deployment
  using ansible.
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-a4dc46db
Outputs:
  ALBDNS:
    Description: The DNS name for the application load balancer.
    Value: !GetAtt 'WebElb.DNSName'
Parameters:
  ArtifactKey:
    Description: The key for the artifact that codebuild creates.
    Type: String
  GithubRepoLink:
    Description: Name of the repository you wish to connect to codebuild.
    Type: String
Resources:
  CMSBuild:
    Properties:
      Artifacts:
        Location: !Ref 'CodeDeployApplicationBucket'
        Name: !Ref 'ArtifactKey'
        NamespaceType: BUILD_ID
        Packaging: ZIP
        Type: S3
      Description: Code build for CMS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:3.6.5
        Type: LINUX_CONTAINER
      Name: CMS-Build
      ServiceRole: !GetAtt 'CMSCodeBuildServiceRole.Arn'
      Source:
        Auth:
          Type: OAUTH
        Location: !Ref 'GithubRepoLink'
        Type: GITHUB
      Triggers:
        Webhook: 'true'
    Type: AWS::CodeBuild::Project
  CMSCodeBuildServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - '*'
                Sid: logs
            Version: '2012-10-17'
          PolicyName: CloudWatchLogsPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:DeleteObject
                Effect: Allow
                Resource:
                  - !GetAtt 'CodeDeployApplicationBucket.Arn'
                  - !Join
                    - ''
                    - - !GetAtt 'CodeDeployApplicationBucket.Arn'
                      - /*
                Sid: codebuilder
            Version: '2012-10-17'
          PolicyName: s3AccessPolicy
    Type: AWS::IAM::Role
  CMSCodeDeployApplication:
    Type: AWS::CodeDeploy::Application
  CMSDeploymentGroup:
    DependsOn:
      - CMSCodeDeployApplication
    Properties:
      ApplicationName: !Ref 'CMSCodeDeployApplication'
      AutoScalingGroups:
        - !Ref 'WebAutoScaler'
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt 'WebTargetGroup.TargetGroupName'
      ServiceRoleArn: !GetAtt 'CMSDeploymentGroupServiceRole.Arn'
    Type: AWS::CodeDeploy::DeploymentGroup
  CMSDeploymentGroupServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - '*'
                Sid: logs
            Version: '2012-10-17'
          PolicyName: CloudWatchLogsPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:DeleteObject
                Effect: Allow
                Resource:
                  - !GetAtt 'CodeDeployApplicationBucket.Arn'
                  - !Join
                    - ''
                    - - !GetAtt 'CodeDeployApplicationBucket.Arn'
                      - /*
                Sid: codebuilder
            Version: '2012-10-17'
          PolicyName: s3AccessPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - autoscaling:*
                  - elasticloadbalancing:*
                Effect: Allow
                Resource:
                  - '*'
                Sid: codebuilder
            Version: '2012-10-17'
          PolicyName: autoscalingAccess
    Type: AWS::IAM::Role
  CodeDeployApplicationBucket:
    Type: AWS::S3::Bucket
  GatewayToInternet:
    Properties:
      InternetGatewayId: !Ref 'internetGateway'
      VpcId: !Ref 'MainVPC'
    Type: AWS::EC2::VPCGatewayAttachment
  MainVPC:
    Properties:
      CidrBlock: 10.1.0.0/16
    Type: AWS::EC2::VPC
  Subnet1RouteAssociation:
    Properties:
      RouteTableId: !Ref 'subnetRouteTable'
      SubnetId: !Ref 'WebAppSubnet1'
    Type: AWS::EC2::SubnetRouteTableAssociation
  Subnet2RouteAssociation:
    Properties:
      RouteTableId: !Ref 'subnetRouteTable'
      SubnetId: !Ref 'WebAppSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  WebAppSubnet1:
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.1.0.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref 'MainVPC'
    Type: AWS::EC2::Subnet
  WebAppSubnet2:
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.1.1.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref 'MainVPC'
    Type: AWS::EC2::Subnet
  WebAutoScaler:
    Properties:
      LaunchConfigurationName: !Ref 'webLaunchConfig'
      MaxSize: '2'
      MinSize: '2'
      TargetGroupARNs:
        - !Ref 'WebTargetGroup'
      VPCZoneIdentifier:
        - !Ref 'WebAppSubnet2'
        - !Ref 'WebAppSubnet1'
    Type: AWS::AutoScaling::AutoScalingGroup
  WebAutoscaleSG:
    Properties:
      GroupDescription: Allow web traffic in from elb on port 80
      GroupName: AutoscaleGroup
      SecurityGroupIngress:
        - Description: Allow web traffic in from ELB
          FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'elbSecurityGroup'
          ToPort: 80
      VpcId: !Ref 'MainVPC'
    Type: AWS::EC2::SecurityGroup
  WebElb:
    Properties:
      Name: WebElb
      SecurityGroups:
        - !Ref 'elbSecurityGroup'
      Subnets:
        - !Ref 'WebAppSubnet1'
        - !Ref 'WebAppSubnet2'
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  WebListener:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'WebTargetGroup'
          Type: forward
      LoadBalancerArn: !Ref 'WebElb'
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  WebTargetGroup:
    DependsOn: WebElb
    Properties:
      HealthCheckPath: /health
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: '200'
      Name: NginxTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref 'MainVPC'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  elbSecurityGroup:
    Properties:
      GroupDescription: Allow web traffic in from internet to ELB
      GroupName: WebGroup
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: Allow HTTP traffic in from internet.
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref 'MainVPC'
    Type: AWS::EC2::SecurityGroup
  internetGateway:
    Type: AWS::EC2::InternetGateway
  routeToInternet:
    DependsOn: GatewayToInternet
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'internetGateway'
      RouteTableId: !Ref 'subnetRouteTable'
    Type: AWS::EC2::Route
  sshSecurityGroup:
    Properties:
      GroupDescription: Allow SSH traffic in from internet
      GroupName: SSHGroup
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: Allow SSH traffic in from internet.
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref 'MainVPC'
    Type: AWS::EC2::SecurityGroup
  subnetRouteTable:
    Properties:
      VpcId: !Ref 'MainVPC'
    Type: AWS::EC2::RouteTable
  webInstanceCodeDeployRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:DeleteObject
                  - s3:ListObjects
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:ListAllMyBuckets
                  - s3:ListMultipartUploadParts
                  - s3:ListBucketMultipartUploads
                  - s3:ListBucketByTags
                Effect: Allow
                Resource:
                  - !GetAtt 'CodeDeployApplicationBucket.Arn'
                  - !Join
                    - ''
                    - - !GetAtt 'CodeDeployApplicationBucket.Arn'
                      - /*
                  - arn:aws:s3:::aws-codedeploy-us-east-2/*
                  - arn:aws:s3:::aws-codedeploy-us-east-1/*
                  - arn:aws:s3:::aws-codedeploy-us-west-1/*
                  - arn:aws:s3:::aws-codedeploy-us-west-2/*
                  - arn:aws:s3:::aws-codedeploy-ca-central-1/*
                  - arn:aws:s3:::aws-codedeploy-eu-west-1/*
                  - arn:aws:s3:::aws-codedeploy-eu-west-2/*
                  - arn:aws:s3:::aws-codedeploy-eu-west-3/*
                  - arn:aws:s3:::aws-codedeploy-eu-central-1/*
                  - arn:aws:s3:::aws-codedeploy-ap-northeast-1/*
                  - arn:aws:s3:::aws-codedeploy-ap-northeast-2/*
                  - arn:aws:s3:::aws-codedeploy-ap-southeast-1/*
                  - arn:aws:s3:::aws-codedeploy-ap-southeast-2/*
                  - arn:aws:s3:::aws-codedeploy-ap-south-1/*
                  - arn:aws:s3:::aws-codedeploy-sa-east-1/*
                Sid: CodeDeployS3
            Version: '2012-10-17'
          PolicyName: CodeDeployS3Policy
    Type: AWS::IAM::Role
  webInstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref 'webInstanceCodeDeployRole'
    Type: AWS::IAM::InstanceProfile
  webLaunchConfig:
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sdk
          Ebs:
            VolumeSize: '10'
      IamInstanceProfile: !Ref 'webInstanceProfile'
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      KeyName: advanced-cfn
      SecurityGroups:
        - !Ref 'sshSecurityGroup'
        - !Ref 'WebAutoscaleSG'
      UserData: !Base64
        Fn::Join:
          - "\n"
          - - '#!/bin/bash'
            - apt-add-repository -y ppa:ansible/ansible
            - apt-get update && sudo apt-get -y upgrade
            - apt-get -y install git
            - apt-get -y install ansible
            - cd /home/ubuntu/
            - sudo -H -u ubuntu bash -c 'export LC_ALL=C.UTF-8 && export LANG=C.UTF-8
              && ansible-pull -U https://github.com/DameonSmith/aws-meetup-ansible.git
              --extra-vars "user=ubuntu"'
    Type: AWS::AutoScaling::LaunchConfiguration

