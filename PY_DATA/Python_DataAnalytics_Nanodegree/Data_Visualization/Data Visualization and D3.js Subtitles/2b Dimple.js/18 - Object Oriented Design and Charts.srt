1
00:00:00,500 --> 00:00:05,200
If you are not familiar with object-oriented programming or its counterpart,

2
00:00:05,200 --> 00:00:08,490
the functional programming paradigm, this may seem weird to you.

3
00:00:09,840 --> 00:00:12,700
We called a few methods on an object.

4
00:00:12,700 --> 00:00:16,350
The methods returned some values, but now, when we wanted to actually draw our

5
00:00:16,350 --> 00:00:22,730
chart, we call the draw method on our original myChart variable.

6
00:00:22,730 --> 00:00:27,460
What's happening behind the scenes, the, the dimple library actually implements

7
00:00:27,460 --> 00:00:32,420
an object-oriented interface for its objects, in which the method calls on

8
00:00:32,420 --> 00:00:37,030
the myChart object and you take the internal state of the object.

9
00:00:37,030 --> 00:00:38,550
What does this mean?

10
00:00:38,550 --> 00:00:43,050
Well, when you call the series and addAxis functions, they

11
00:00:43,050 --> 00:00:48,660
actually add the axis and series objects into the chart that they're called on.

12
00:00:48,660 --> 00:00:54,040
So now, when we call draw on myChart, myChart's been mutated by

13
00:00:54,040 --> 00:00:58,390
the addSeries addAxis calls, such that they have all the data and

14
00:00:58,390 --> 00:01:02,950
specification they need for the draw function to operate.

15
00:01:02,950 --> 00:01:07,520
The fun thing about working in the debugger with Chrome is that as soon as we

16
00:01:07,520 --> 00:01:12,750
call the draw function, the chart will immediately be drawn into the Web page.

17
00:01:12,750 --> 00:01:15,730
Keep an eye on the Web page in the background here.

18
00:01:15,730 --> 00:01:18,310
And even though we're pausing the debugger,

19
00:01:18,310 --> 00:01:22,320
all the code we execute here has access to the Web page itself.

20
00:01:22,320 --> 00:01:23,960
Calling the draw method,

21
00:01:23,960 --> 00:01:29,330
we can see that a bar chart spontaneously appeared in our Web page window.

22
00:01:29,330 --> 00:01:32,489
One last thing to note before we move on to better and

23
00:01:32,489 --> 00:01:36,824
different charts, that the returned object from the draw function is

24
00:01:36,824 --> 00:01:39,186
the chart object that we called it on.

25
00:01:39,186 --> 00:01:45,506
If we inspect draw_chart, which we stored the return value of myChart.draw into,

26
00:01:45,506 --> 00:01:48,753
we can see here that it's dimple.chart and

27
00:01:48,753 --> 00:01:53,350
has all the same properties as our original chart.

28
00:01:53,350 --> 00:01:58,400
And again, we can actually check whether it is equivalent to our initial chart

29
00:01:58,400 --> 00:02:03,070
by using the triple equals operator in JavaScript and comparing it to myChart.

30
00:02:03,070 --> 00:02:07,230
And we can see here that it is indeed the original chart.

31
00:02:07,230 --> 00:02:11,080
This style of returning the object that you would call the method on is

32
00:02:11,080 --> 00:02:15,790
exactly how D3 works and allows you to chain methods without having to go

33
00:02:15,790 --> 00:02:18,490
through an intermediate representation or variable.

