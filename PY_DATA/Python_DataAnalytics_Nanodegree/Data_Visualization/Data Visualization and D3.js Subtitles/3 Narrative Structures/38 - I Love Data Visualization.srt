1
00:00:00,120 --> 00:00:03,000
Just to illustrate what I mean by this,

2
00:00:03,000 --> 00:00:06,790
I'm going to always return the same thing for every row of my data.

3
00:00:06,790 --> 00:00:11,005
In this case, a JavaScript object that has a single key,

4
00:00:11,005 --> 00:00:16,340
i_love and a single value, data visualization.

5
00:00:16,340 --> 00:00:21,150
And again this is just a toy example that'll hopefully clarify what's going

6
00:00:21,150 --> 00:00:23,330
on in this intermediate function.

7
00:00:23,330 --> 00:00:26,080
And if we save our file and refresh our page,

8
00:00:27,180 --> 00:00:31,500
remember there's a debugger in our code right before much of the main,

9
00:00:31,500 --> 00:00:34,900
drawing logic it's called, so we can inspect our data there.

10
00:00:34,900 --> 00:00:36,530
We stopped at the debugger.

11
00:00:36,530 --> 00:00:42,100
If we put right after our D3 SVG data binding,

12
00:00:42,100 --> 00:00:45,920
with our data, and let's look at what's actually contained in data.

13
00:00:45,920 --> 00:00:50,440
The data has the same number of rows in this case 836.

14
00:00:50,440 --> 00:00:54,060
But if we look at what each one of those is.

15
00:00:54,060 --> 00:00:57,580
We have the object that we returned in our intermediate function.

16
00:00:57,580 --> 00:01:01,920
In this case an object that has a single key, i_love, and

17
00:01:01,920 --> 00:01:05,060
a single value, data visualization.

18
00:01:05,060 --> 00:01:09,850
If we use the internal pretty printing function in the Chrome console.

19
00:01:09,850 --> 00:01:16,250
The console.table function on our data we can see our data has a single field,

20
00:01:16,250 --> 00:01:19,990
in this case i_love, that for every row has the same value,

21
00:01:19,990 --> 00:01:23,190
in this case data visualization.

22
00:01:23,190 --> 00:01:29,610
This happened because as we load our World Cup_geo data for

23
00:01:29,610 --> 00:01:32,710
every row, we first call this function.

24
00:01:32,710 --> 00:01:36,520
And since we always return an object to have a single key, I love,

25
00:01:36,520 --> 00:01:40,100
in the single value data visualization,

26
00:01:40,100 --> 00:01:44,750
which has the affect of making every row exactly identical.

27
00:01:44,750 --> 00:01:47,340
But now let's do something a little more useful and

28
00:01:47,340 --> 00:01:52,630
rather than returning a single somewhat nonsensical data

29
00:01:52,630 --> 00:01:56,450
object from our transformation function, let's parse our date.

