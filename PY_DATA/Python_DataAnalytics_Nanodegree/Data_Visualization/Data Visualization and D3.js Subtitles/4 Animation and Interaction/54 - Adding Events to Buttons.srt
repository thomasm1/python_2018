1
00:00:00,270 --> 00:00:01,790
And as you can see here,

2
00:00:01,790 --> 00:00:07,280
as the animation draws to an end, the buttons show up on the left side.

3
00:00:07,280 --> 00:00:11,570
So the first part of adding interactivity has been completed.

4
00:00:11,570 --> 00:00:15,500
Now we need to actually allow the user to click our buttons.

5
00:00:15,500 --> 00:00:19,390
Here, we are still in the conditional that clears our interval.

6
00:00:19,390 --> 00:00:23,090
And once we've created our buttons, we want to attach some event.

7
00:00:23,090 --> 00:00:25,850
If you're not familiar with JavaScript events,

8
00:00:25,850 --> 00:00:28,410
there's many ways to do them with native JavaScript.

9
00:00:28,410 --> 00:00:33,620
But most libraries out there allow you to interact in some way with user events.

10
00:00:33,620 --> 00:00:39,750
The most common library, and what might have driven its rise to fame, is jQuery.

11
00:00:39,750 --> 00:00:42,510
Where it made it effortless to attach events and

12
00:00:42,510 --> 00:00:44,500
functions to elements on the page.

13
00:00:44,500 --> 00:00:47,030
But there's many other libraries.

14
00:00:47,030 --> 00:00:52,310
In our case, the most notable D3 which implements a similar style of

15
00:00:52,310 --> 00:00:55,020
adding events to given HTML elements.

16
00:00:55,020 --> 00:00:57,860
In this case, we've created our buttons.

17
00:00:57,860 --> 00:01:02,500
And with those, we want to enable some interaction on a click event.

18
00:01:02,500 --> 00:01:05,850
The syntax for this is to call the on-function.

19
00:01:05,850 --> 00:01:09,840
With some D3 selection, in this case, our buttons, in the first

20
00:01:09,840 --> 00:01:14,810
argument is the event that you want to trigger your callback function.

21
00:01:14,810 --> 00:01:18,980
In this case, we want to attach the click event to our buttons, but

22
00:01:18,980 --> 00:01:22,750
there's many others, some of which I've included in the instruction notes for

23
00:01:22,750 --> 00:01:25,550
this video, such as mouse over.

24
00:01:25,550 --> 00:01:26,570
Mouse out.

25
00:01:26,570 --> 00:01:32,520
And even custom events, and any other event that JavaScript itself supports.

26
00:01:32,520 --> 00:01:37,070
The second argument, to on is the function you want to run.

27
00:01:37,070 --> 00:01:39,930
When the given event happens on your element.

28
00:01:39,930 --> 00:01:43,640
Sometimes you might see it refer to as the event handler.

29
00:01:43,640 --> 00:01:48,070
The argument D passed to the event handler function is the same D

30
00:01:48,070 --> 00:01:52,249
that gets passed to most assessor functions in D3.

31
00:01:52,249 --> 00:01:54,190
That being the data.

32
00:01:54,190 --> 00:01:57,180
So in this case d, when a button is clicked,

33
00:01:57,180 --> 00:01:59,280
corresponds to the year that was clicked.

34
00:01:59,280 --> 00:02:03,860
In our case, when a user clicks on a button of the given year,

35
00:02:03,860 --> 00:02:08,080
we want to call our update function with d, or rather.

36
00:02:08,080 --> 00:02:12,030
The year of the button that was clicked such that the map updates.

37
00:02:12,030 --> 00:02:15,770
The line above that I've written is D3's way

38
00:02:15,770 --> 00:02:19,070
of accessing the element that was clicked on.

39
00:02:19,070 --> 00:02:24,810
In this case we use a D3 select but we pass it the special JavaScript variable.

40
00:02:24,810 --> 00:02:25,660
This.

41
00:02:25,660 --> 00:02:30,700
There's a lot of confusion around when and what this actually represents, and

42
00:02:30,700 --> 00:02:35,090
again I've linked to some many good resources in the instructor notes, but for

43
00:02:35,090 --> 00:02:37,910
the case of what we would encounter in this course,

44
00:02:37,910 --> 00:02:42,640
this most always represents the element itself that was clicked.

45
00:02:42,640 --> 00:02:47,480
In this case, the HTML button, and the reason I'm accessing this, or

46
00:02:47,480 --> 00:02:50,065
rather, the button clicked, is because I

47
00:02:50,065 --> 00:02:55,210
want to indicate to the user in some way what button actually was clicked?

48
00:02:55,210 --> 00:02:59,030
In our case we want to indicate visually to the user and

49
00:02:59,030 --> 00:03:03,250
provide some immediate feedback about what button they clicked and whether or

50
00:03:03,250 --> 00:03:05,880
not that click actually happened.

51
00:03:05,880 --> 00:03:09,240
And in this case we're going to update the styles and

52
00:03:09,240 --> 00:03:11,690
change the background to be blue.

53
00:03:11,690 --> 00:03:16,510
And the color of the text to be white, also to make it smoother and more

54
00:03:16,510 --> 00:03:21,760
aesthetically pleasing, we can add some animation and transition to this effect.

55
00:03:21,760 --> 00:03:24,300
Going back to our browser, we can refresh the page.

56
00:03:25,650 --> 00:03:30,940
And we see our buttons as they were before, now let's try clicking on one.

57
00:03:30,940 --> 00:03:35,320
If you noticed, I clicked on the year 1958, the map has updated,

58
00:03:35,320 --> 00:03:40,490
the circles moved, and also the year and the titles changed.

59
00:03:40,490 --> 00:03:43,260
But also the stylings on the buttons have changed.

60
00:03:43,260 --> 00:03:46,760
Let's compare the year 1958 to the year 1994.

61
00:03:46,760 --> 00:03:51,000
Again we can see the update happening.

62
00:03:51,000 --> 00:03:54,580
But one quirk is that now both buttons are blue.

63
00:03:54,580 --> 00:03:57,520
And every successive button we click stays blue.

64
00:03:57,520 --> 00:03:59,540
Do you know what might be happening here?

