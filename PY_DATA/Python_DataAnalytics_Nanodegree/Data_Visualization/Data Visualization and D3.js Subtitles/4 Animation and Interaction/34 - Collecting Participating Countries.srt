1
00:00:00,270 --> 00:00:05,200
In this case I want to start with finding the countries that participated in

2
00:00:05,200 --> 00:00:09,790
a given year since it's a litte bit more complicated than simply filtering our

3
00:00:09,790 --> 00:00:11,090
data by year.

4
00:00:11,090 --> 00:00:13,950
And once we see how to select the countries of interest

5
00:00:13,950 --> 00:00:16,600
filtering the years should be quite easy.

6
00:00:16,600 --> 00:00:20,480
In order to find every country that has participated for a given year,

7
00:00:20,480 --> 00:00:25,680
we're going to go back to our aggregation functions that we've defined for

8
00:00:25,680 --> 00:00:27,250
use on our nested object.

9
00:00:27,250 --> 00:00:30,330
We can see here in the agg year function.

10
00:00:30,330 --> 00:00:34,769
Which will get passed leaves, and if you remember, in this case,

11
00:00:34,769 --> 00:00:38,180
it's all of the games for a given year grouped, and

12
00:00:38,180 --> 00:00:43,044
after we compute what we've already found of the sum of the attendance.

13
00:00:43,044 --> 00:00:45,011
And the coordinates to draw,

14
00:00:45,011 --> 00:00:49,817
we can simply group the teams together into an array to return in the end.

15
00:00:49,817 --> 00:00:54,290
D3 actually has a lot of great built in data structures, and

16
00:00:54,290 --> 00:00:57,790
functions to filter and transform data.

17
00:00:57,790 --> 00:01:02,680
In this case we're going to be using d3's built-in set data structure

18
00:01:02,680 --> 00:01:07,550
which functions just like other sets in math or other programming languages.

19
00:01:07,550 --> 00:01:10,790
It's a collection of distinct or unique objects.

20
00:01:10,790 --> 00:01:15,580
It has the property that if you add an element to a set is already contained in

21
00:01:15,580 --> 00:01:17,890
it, it doesn't add a duplicate.

22
00:01:17,890 --> 00:01:20,880
Here we've initialized an empty set, which we

23
00:01:20,880 --> 00:01:26,120
can then iterate through our teams for a given year, adding them one at a time.

24
00:01:26,120 --> 00:01:31,130
To do this, we can use JavaScript's built-in forEach function called on

25
00:01:31,130 --> 00:01:32,120
our leaves array.

26
00:01:32,120 --> 00:01:34,520
ForEach is similar to map, except for

27
00:01:34,520 --> 00:01:38,770
instead of returning an array, as we did when we found our coordinates.

28
00:01:38,770 --> 00:01:41,900
It simply runs an accessor function and

29
00:01:41,900 --> 00:01:45,420
passes every element of our array, one at a time.

30
00:01:45,420 --> 00:01:48,630
In this case, we're not actually returning anything from our for

31
00:01:48,630 --> 00:01:53,980
each, we're only adding team one and team two to our set.

32
00:01:53,980 --> 00:01:59,220
And again, since the set automatically de-duplicates anything, we don't have to

33
00:01:59,220 --> 00:02:04,590
worry about adding teams multiple times, the set takes care of that for us.

34
00:02:04,590 --> 00:02:05,780
So in the end,

35
00:02:05,780 --> 00:02:11,700
the set will represent a collection of unique teams for a given year.

36
00:02:11,700 --> 00:02:16,940
And to pass our teams to our return object, we call .values.

37
00:02:16,940 --> 00:02:21,280
On the teams set, which turns the set of team names,

38
00:02:21,280 --> 00:02:25,050
into an array that we can handle easily in the rest of our code.

39
00:02:25,050 --> 00:02:28,310
Now that we have the teams for a given year,

40
00:02:28,310 --> 00:02:32,070
let's go back to our update function, and put all the pieces together.

